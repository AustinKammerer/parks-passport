import { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { useParams, useHistory } from "react-router-dom";
import { DateTime } from "luxon";

import { EndTripButton, DeleteButton, AddEntryButton } from "../Buttons";
import TripLogEntryListItem from "./TripLogEntryListItem";
import GetStarted from "../GetStarted/GetStarted";
import AddEntry from "../EntryForm/AddEntry";
import EditEntry from "../EntryForm/EditEntry";

import Typography from "@mui/material/Typography";
import Box from "@mui/material/Box";
import Button from "@mui/material/Button";
import Container from "@mui/material/Container";
import Grid from "@mui/material/Grid";
import Fab from "@mui/material/Fab";
import AddIcon from "@mui/icons-material/Add";

export default function TripLog({ actionType }) {
  const dispatch = useDispatch();
  const history = useHistory();
  const { tripId } = useParams();

  const { tripLog } = useSelector((store) => store.log);

  // if the url has a valid trip id, fetch its log

  useEffect(() => {
    dispatch({ type: actionType });
    tripId !== "0" && dispatch({ type: "FETCH_TRIP_LOG", payload: tripId });
  }, []);

  // format the timestamps generated by the database when the trip was started/ended
  const startDate = DateTime.fromISO(tripLog.startDate).toLocaleString(
    DateTime.DATE_MED_WITH_WEEKDAY
  );
  const endDate = DateTime.fromISO(tripLog.endDate).toLocaleString(
    DateTime.DATE_MED_WITH_WEEKDAY
  );

  // directs user to the park's info page - uses route params
  const getParkInfo = () => {
    console.log(tripLog.parkCode);
    history.push(`/info/${tripLog.parkCode}`);
  };

  return (
    <Container component="main" sx={{ px: 0, pt: 10 }}>
      {/* Display the trip's log */}
      {tripId !== "0" ? (
        <Box>
          <img src={tripLog?.coverImage} />
          <Box display="flex" flexDirection="column" alignItems="center">
            <Typography component="h2" variant="h4" align="center" px={2}>
              {tripLog?.name}{" "}
              <Button size="small" onClick={getParkInfo}>
                Park Info
              </Button>
            </Typography>
            <Typography
              component="h4"
              variant="h6"
              fontWeight={300}
              fontStyle="italic"
            >
              Start Date: {tripLog && startDate}
            </Typography>
            {tripLog?.endDate && (
              <Typography
                component="h4"
                variant="h6"
                fontWeight={300}
                fontStyle="italic"
              >
                End Date: {tripLog && endDate}
              </Typography>
            )}

            {tripLog?.isCurrent && (
              <EndTripButton
                sx={{ my: 1, borderRadius: 10 }}
                tripId={tripLog.tripId}
              />
            )}
            <AddEntryButton />
            <AddEntry />
            <EditEntry />
            {tripLog.entries?.length > 0 && (
              <Grid
                container
                flexDirection="column"
                spacing={2}
                justifyContent="center"
                mt={1}
              >
                {tripLog.entries?.map((entry) => (
                  <Grid item key={entry.logId}>
                    <TripLogEntryListItem entry={entry} />
                  </Grid>
                ))}
              </Grid>
            )}
            {!tripLog?.isCurrent && (
              <DeleteButton
                tripLog={tripLog}
                sx={{
                  mt: 2,
                  borderRadius: 10,
                }}
              />
            )}
          </Box>

          {/* <Button onClick={getParkInfo}>Park Info</Button> */}
          {/* <Button variant="contained" color="secondary">
            Photos
          </Button> */}
          {/* <Button
            variant="contained"
            onClick={() =>
              history.push(`/log/entry/add?tripId=${tripLog.tripId}`)
            }
          >
            Add Note
          </Button> */}
        </Box>
      ) : (
        <GetStarted currentTripEmpty={true} />
      )}
    </Container>
  );
}
